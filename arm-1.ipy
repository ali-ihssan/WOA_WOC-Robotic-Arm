#!/usr/bin/env python
# -*- coding: utf-8 -*-

import time
from adafruit_servokit import ServoKit
import ikpy.chain
import numpy as np
import time
import math
from time import sleep
import ipywidgets as widgets

# Constants
nbPCAServo = 5
npPCAServo = 1
# Parameters
MIN_IMP = [500, 500, 500, 500, 500, 500]
MAX_IMP = [2400, 2400, 2500, 2400, 2400, 2400, ]
MIN_ANG = [0, 0, 0, 0, 0, 0]
MAX_ANG = [180, 180, 180, 180, 180, 180]

# Objects
pca = ServoKit(channels=16)

# function init


def init():

    for i in range(nbPCAServo):
        pca.servo[i].set_pulse_width_range(MIN_IMP[i], MAX_IMP[i])


# function main
def main():
    print('Hello ')
    print('the robot started')
    pcaScenario()


def smooth(servoid, ang):
    print("Send angle {} to Servo {}".format(ang, servoid))
    pca.servo[int(servoid)].angle = ang
    time.sleep(2)


def reset():

    for i in range(nbPCAServo):
        print("Reset angle to Servo {}".format(i))
        pca.servo[i].angle = 90
        time.sleep(1)


def calculate_seedlings(field_width, field_length, min_distance, max_distance):
    seedlings_per_row_min = int(field_width / min_distance)
    seedlings_per_row_max = int(field_width / max_distance)
    seedlings_per_col_min = int(field_length / min_distance)
    seedlings_per_col_max = int(field_length / max_distance)

    seedlings_min = seedlings_per_row_min*seedlings_per_col_min
    seedlings_max = seedlings_per_row_max*seedlings_per_col_max
    return (seedlings_min, seedlings_max)


def snooth(i, v):
    smooth(4, 90)
    smooth(1, 80)
    smooth(2, 70)
    smooth(3, 180)
    smooth(0, 180)
    smooth(4, 180)
    time.sleep(1)
    smooth(0, 135)
    smooth(3, 150)
    smooth(2, 130)
    smooth(1, 180)
    smooth(4, 90)

    smooth(4, 90)
    smooth(1, 80)
    smooth(2, 70)
    smooth(3, 180)
    smooth(0, 180)
    smooth(4, 180)
    time.sleep(1)
    smooth(0, 90)
    smooth(3, 150)
    smooth(2, 130)
    smooth(1, 180)
    smooth(4, 90)

    smooth(4, 90)
    smooth(1, 80)
    smooth(2, 70)
    smooth(3, 180)
    smooth(0, 180)
    smooth(4, 180)
    time.sleep(1)
    smooth(0, 45)
    smooth(3, 150)
    smooth(2, 130)
    smooth(1, 180)
    smooth(4, 90)


def farmer_input():
    field_width = float(input("Enter field width (in meters): "))
    field_length = float(input("Enter field length (in meters): "))
    seedling_type = input(
        "What type Seedlings are being planted /n 1.Aus Rice /n 2. Aman Rice /n 3. Boro Rice")

    if seedling_type == "1":
        min_distance = 0.25
        max_distance = 0.35
    if seedling_type == "2":
        min_distance = 0.15
        max_distance = 0.20
    if seedling_type == "3":
        min_distance = 0.20
        max_distance = 0.30

    seedlings_min, seedlings_max = calculate_seedlings(
        field_width, field_length, min_distance, max_distance)

    print("Number of seedlings (minimum distance):", seedlings_min)
    print("Number of seedlings (optimal distance):", seedlings_max)
    return (seedlings_min, seedlings_max)


def pcaScenario():

    # x = input('mode?')
    # if x == ("m"):
    #     while True:
    #         try:
    #             b = input('servo: -')
    #             a = input('enter: -')

    #             pca.servo[int(b)].angle = int(a)
    #         except ValueError:
    #             print("servo must be 0-15")
    # else:
    farmer_input()
    my_chain = ikpy.chain.Chain.from_urdf_file(
        "3rd.urdf", active_links_mask=[False, True, True, True, True, True,])

    target_position = [0, 0.4, 0.2]
    if target_position[1] <= 0:
        print('cannot calculate location')
        exit()
    if target_position[2] <= -0.2:
        print('cannot reach the calculated location')
        exit()
    target_orientation = [0, 0, 0]

    ik = my_chain.inverse_kinematics(
        target_position, target_orientation, orientation_mode="Y")
    angles = list(map(lambda r: math.degrees(r), ik.tolist()))

    for i in range(npPCAServo):
        snooth(angles[i+1]+90, i)

    computed_position = my_chain.forward_kinematics(ik)
    print("Computed position: %s, original position : %s" %
          (computed_position[:3, 3], target_position))
    print("Computed position (readable) : %s" %
          ['%.2f' % elem for elem in computed_position[:3, 3]])

    time.sleep(5)
    # reset()


if __name__ == '__main__':
    init()
    main()
